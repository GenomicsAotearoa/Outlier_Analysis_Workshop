{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Outlier Analysis Workshop"},{"location":"#preamble","title":"Preamble","text":"<p>There are lots of interesting patterns that you can extract from genetic variant data. This can include patterns of linkage, balancing selection, or even inbreeding signals. One of the most common ones is to try find sites on the genome that are under selection. The following vignette will take you through the basics of genetic selection analysis. </p> Day Lesson overview   Day 1   IntroductionPCAdaptVCFtoolsSetup for BayeScan &amp; BayPass   Day 2   BayeScanBayPassCompile resultsGroup discussionsMeta-analysis contribution Schedule Day 1Day 2 Time Event 9:00am Introductory slides 9:30am Download data 10:00am Morning tea 10:15am PCAdapt 12:00pm Lunch 1:00pm VCFtools 2:00pm Afternoon tea 2:15pm VCFtools continuedSetup for Bayescan &amp; Baypass Time Event 9:00am Bayescan 10:00am Morning tea 10:15am Bayescan (continued)Baypass 12:00pm Lunch 1:00pm Baypass (continued) 2:00pm Afternoon tea 2:15pm Compile resultsGroup discussionsMeta-analysis contribution <p>Funding</p> <p>The project has been funded by the AES ERC Networking Grant Scheme and GSA.</p>"},{"location":"day_1/1.intro_and_setup/","title":"A brief introduction to Genetic Outlier and Association Analysis","text":"<p>When we look through a genome to try to find loci that are under divergent selection, two common approaches are outlier analysis and association analysis. Outlier analysis requires just knowledge of the genetics of your samples (plus sample metadata, for example, population groupings) and tries to find loci that behave very differently from the underlying patterns across the genome (with the assumption being that the rest of the genome represents patterns of neutral genetic diversity). Meanwhile association analysis requires some sort of covariate data and tests whether there are any genetic variants statistically associated with this new data (you may have heard the term GWAS). This covariate data can come in the form of phenotype data (e.g., morphology, disease status, physiology measures) or could be spatial (e.g., environmental, climate). Association tests look for sites in the genome where the presence or absence of a variant is highly correlated with the values in the co-variate data, usually through some regression-type analysis.</p> <p>Throughout this vignette, I will collectively refer to outlier and association analysis as selection analysis. There are a lot of programs that exist currently. You can find a very long (though not exhaustive) list here. </p> <p>This vignette will start by covering some very simple outlier analyses:</p> <ul> <li>PCAdapt can detect genetic marker outliers without having population1 designations using a Principle Component Analysis (PCA) approach.</li> <li>FST outlier analysis is an approach that uses pairwise comparisons between two populations and the fixation index metric to assess each genetic marker.</li> </ul> <p>Next, we will conduct some more advanced outlier analyses:</p> <ul> <li>Bayescan looks for differences in allele frequencies between populations to search for outliers.</li> <li>Baypass elaborates on the bayenv model (another popular association analysis program).</li> </ul> <p>We will cover the pre-processing of program-specific input files, how to run the programs, how to visualise the output, and in some cases we'll need to take extra steps to map the genetic markers of interest back to the SNP data.</p> <p>Reduced representation versus whole genome sequencing (WGS)</p> <p>Outlier analysis is often done on reduced representation data. It is important to remember how your genome coverage (the number of genome variant sites / the genome length) will affect your results and interpretation. Often with WGS data, you will see well-resolved 'peaks' with a fairly smooth curve of points leading up to it on either side. From this, we often infer that the highest point is the genetic variant of interest and the sites on either side of the peak exhibit signals of selection because they reside close to, and thus are linked to, the true variant of interest. However, consider that even in WGS data, unless we have every single genetic variant represented (which may not be the case, depending on our variant calling and filtering parameters), it is possible that the genetic variant of interest that we have identified is not the main one, but is simply another neighboring linked SNP to one that is not represented in the data. This problem becomes even more relevant with reduced representation sequencing (RRS), for which the genome coverage may be extremely patchy2. Thus with all outlier analysis, but especially so for those using RRS data, remember that your flagged outliers are not exhaustive and may themselves only be liked to the variant that is truly under selection.</p> Manhattan plot of the association between P-values and chromosomes."},{"location":"day_1/1.intro_and_setup/#define-your-working-directory-for-this-project-and-the-vcf-file-location","title":"Define your working directory for this project and the VCF file location:","text":"<p>code</p> <pre><code>mkdir ~/outlier_analysis\nDIR=~/outlier_analysis\ncd $DIR\n</code></pre> <p>Our data tree will look like this:</p> <pre><code>outlier_analysis/\n\u251c\u2500\u2500 analysis\n\u2502   \u251c\u2500\u2500 bayescan\n\u2502   \u251c\u2500\u2500 baypass\n\u2502   \u251c\u2500\u2500 pcadapt\n\u2502   \u251c\u2500\u2500 summary\n\u2502   \u2514\u2500\u2500 vcftools_fst\n\u251c\u2500\u2500 data\n\u251c\u2500\u2500 programs\n\u2514\u2500\u2500 workshop_material\n</code></pre> <p>So let's set up our directories to match this</p> <p>code</p> <pre><code>mkdir -p {analysis/{bayescan,baypass,pcadapt,summary,vcftools_fst},data,programs,workshop_material}\n</code></pre>"},{"location":"day_1/1.intro_and_setup/#project-data","title":"Project data","text":"<p>The data provided in this workshop contains 5007 SNPs loci for 39 individuals (13 individuals each from 3 different locations). This data has some missingness (i.e., missing SNP calls). </p> <p>There is also a metadata file containing the individual's unique IDs, assigned populations, and a wingspan measurement for each individual. </p> <p>Let's grab this data from the project's git repository, place the data files into our <code>data</code> directory, and define the environmental variables <code>VCF</code> and <code>METADATA</code> with the locations of the genetic variant and metadata files, respectively.</p> <p>code</p> <pre><code># Enter data directory\ncd $DIR/data\n\n# Download required files to data directory\nwget https://raw.githubusercontent.com/GenomicsAotearoa/Outlier_Analysis_Workshop/main/workshop_files/starling_3populations.recode.vcf\nwget https://raw.githubusercontent.com/GenomicsAotearoa/Outlier_Analysis_Workshop/main/workshop_files/starling_3populations_metadata.txt\n\n# Set environment variables\nVCF=$DIR/data/starling_3populations.recode.vcf\nMETADATA=$DIR/data/starling_3populations_metadata.txt\n</code></pre> <p>Working with your own data</p> <p>Alternatively, you can also use your own data for this workshop. If so, it is a good idea to thin your SNP dataset down to roughly 5,000 SNPs to ensure compute times are not too long. If you have more than 50 individuals, you may also want to reduce this. If you would like to do this, place your genetic variant and metadata file in the <code>data</code> directory and define <code>VCF</code> and <code>METADATA</code> based on their names.</p> <p>Across this workshop, we will need the genetic data to be in several different formats. Let's prepare that now. First, we convert the VCF to PLINK and then to BED.</p> <p>code</p> <pre><code># Enter data directory\ncd $DIR/data\n\n# Load modules\nmodule purge\nmodule load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1\nmodule load PLINK/1.09b6.16 # Convert VCF to PLINK\nvcftools --vcf $VCF --plink --out starling_3populations.plink\n\n# Convert PLINK to BED\nplink --file starling_3populations.plink --make-bed --noweb --out starling_3populations\n</code></pre> Output <pre><code>VCFtools - 0.1.15\n(C) Adam Auton and Anthony Marcketta 2009\n\nParameters as interpreted:\n        --vcf /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/starling_3populations.recode.vcf\n        --out starling_3populations.plink\n        --plink\n\nAfter filtering, kept 39 out of 39 Individuals\nWriting PLINK PED and MAP files ... \n\nUnrecognized values used for CHROM: starling4 - Replacing with 0.\nDone.\nAfter filtering, kept 5007 out of a possible 5007 Sites\nRun Time = 0.00 seconds\n</code></pre> Output <pre><code>PLINK v1.90b6.16 64-bit (19 Feb 2020)          www.cog-genomics.org/plink/1.9/\n(C) 2005-2020 Shaun Purcell, Christopher Chang   GNU General Public License v3\nLogging to starling_3populations.log.\nOptions in effect:\n  --file starling_3populations.plink\n  --make-bed\n  --noweb\n  --out starling_3populations\n\nNote: --noweb has no effect since no web check is implemented yet.\n128824 MB RAM detected; reserving 64412 MB for main workspace.\n.ped scan complete (for binary autoconversion).\nPerforming single-pass .bed write (5007 variants, 39 people).\n--file: starling_3populations-temporary.bed +\nstarling_3populations-temporary.bim + starling_3populations-temporary.fam\nwritten.\n5007 variants loaded from .bim file.\n39 people (0 males, 0 females, 39 ambiguous) loaded from .fam.\nAmbiguous sex IDs written to starling_3populations.nosex .\nUsing 1 thread (no multithreaded calculations invoked).\nBefore main variant filters, 39 founders and 0 nonfounders present.\nCalculating allele frequencies... done.\nTotal genotyping rate is 0.723331.\n5007 variants and 39 people pass filters and QC.\nNote: No phenotypes present.\n--make-bed to starling_3populations.bed + starling_3populations.bim +\nstarling_3populations.fam ... done.\n</code></pre> <ol> <li> <p>I will say population for simplicity throughout this vignette. However, equally we can test for differences between sample sites, subpopulations, and other types of groupings. What counts as one 'group' of organisms will depend on your study system or question.\u00a0\u21a9</p> </li> <li> <p>You may also want to consider linkage blocks.\u00a0\u21a9</p> </li> </ol>"},{"location":"day_1/2.pcadapt/","title":"PCAdapt","text":"<p>PCAdapt uses an ordination approach to find sites in a data set that are outliers with respect to background population structure. The PCAdapt manual is available here. </p> <p>Citation</p> <p>Priv\u00e9, F., Luu, K., Vilhj\u00e1lmsson, B. J., &amp; Blum, M. G. B. (2020). Performing Highly Efficient Genome Scans for Local Adaptation with R Package pcadapt Version 4. Mol Biol Evol, 37(7), 2153-2154. https://doi.org/10.1093/molbev/msaa053 </p> <p>First, let's install PCAdapt and set your working directory.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(\"pcadapt\")\nsetwd(\"~/outlier_analysis/analysis/pcadapt/\")\n</code></pre> <p>Now let's load in the data - PCAdapt uses bed file types.</p> <p>code</p> <pre><code>starlings_bed &lt;- \"~/outlier_analysis/data/starling_3populations.bed\"\nstarlings_pcadapt &lt;- read.pcadapt(starlings_bed, type = \"bed\")\n</code></pre> <p>Produce K plot.</p> <p>code</p> <pre><code>starlings_pcadapt_kplot &lt;- pcadapt(input = starlings_pcadapt, K = 20)\npdf(\"pcadapt_starlings_kplot.pdf\")\nplot(starlings_pcadapt_kplot, option = \"screeplot\")\ndev.off()\n</code></pre> <p></p> <p>A K value of 3 is most appropriate, as this is the value of K after which the curve starts to flatten out more.</p> <p>code</p> <pre><code>starlings_pcadapt_pca &lt;- pcadapt(starlings_pcadapt, K = 3)\nsummary(starlings_pcadapt_pca)\n</code></pre> Output <pre><code>                Length  Class  Mode\nscores            117  -none-  numeric\nsingular.values     3  -none-  numeric\nloadings        15021  -none-  numeric\nzscores         15021  -none-  numeric\naf               5007  -none-  numeric\nmaf              5007  -none-  numeric\nchi2.stat        5007  -none-  numeric\nstat             5007  -none-  numeric\ngif                 1  -none-  numeric\npvalues          5007  -none-  numeric\npass             4610  -none-  numeric\n</code></pre> <p>Investigate axis projections.</p> <p>code</p> <pre><code>poplist.names &lt;- c(rep(\"Lemon\", 13),rep(\"Warrnambool\", 13),rep(\"Nowra\", 13))\nprint(poplist.names)\npdf(\"pcadapt_starlings_projection1v2.pdf\")\nplot(starlings_pcadapt_kplot, option = \"scores\", i = 1, j = 2, pop = poplist.names)\ndev.off()\npdf(\"pcadapt_starlings_projection5v7.pdf\")\nplot(starlings_pcadapt_kplot, option = \"scores\", i = 5, j = 7, pop = poplist.names)\ndev.off()\n</code></pre> <p>Ignore the warning</p> <pre><code>Warning message:\nUse of `df$Pop` is discouraged. Use `Pop` instead.\n</code></pre> <p></p> <p></p> <p>Investigate Manhattan and Q-Qplot.</p> <p>Manhattan plots</p> <p>This is a way to visualize the GWAS (genome-wide association study) p-values (or other statistical values) at each SNP locus along the genome.</p> <p>Q-Qplots</p> <p>This is a quick way to check if your residuals are normally distributed. Check out more information here.</p> <p>code</p> <pre><code>pdf(\"pcadapt_starlings_manhattan.pdf\")\nplot(starlings_pcadapt_pca, option = \"manhattan\")\ndev.off()\npdf(\"pcadapt_starlings_qqplot.pdf\")\nplot(starlings_pcadapt_pca, option = \"qqplot\")\ndev.off()\n</code></pre> <p> </p> <p>Plot and adjust the p-values.</p> <p>code</p> <pre><code>pdf(\"pcadapt_starlings_pvalues.pdf\")\nhist(starlings_pcadapt_pca$pvalues, xlab = \"p-values\", main = NULL, breaks = 50, col = \"orange\")\ndev.off()\n</code></pre> <p></p> <p>code</p> <pre><code>starlings_pcadapt_padj &lt;- p.adjust(starlings_pcadapt_pca$pvalues,method=\"bonferroni\")\nalpha &lt;- 0.1\noutliers &lt;- which(starlings_pcadapt_padj &lt; alpha)\nlength(outliers)\nwrite.table(outliers, file=\"starlings_pcadapt_outliers.txt\")\n</code></pre> Output <pre><code>[1] 3\n</code></pre> <p>After this, we will jump out of <code>R</code> and back into the command line by using the following command: </p> <p>code</p> <pre><code>q()\n</code></pre>"},{"location":"day_1/2.pcadapt/#mapping-outliers-pcadapt","title":"Mapping Outliers: PCAdapt","text":"<p>Find the SNP ID of the outlier variants.</p> <p>code</p> <pre><code>cd $DIR/analysis\n</code></pre> <p>The first thing we will do is create a list of SNPs in VCF and then assign line numbers that can be used to find matching line numbers in outliers (SNP IDs are lost in PCadapt &amp; Bayescan, line numbers are used as signifiers). </p> <p>We create this in the <code>analysis/</code> directory because we will use it for more than just mapping the outlier SNPs for PCAdapt, we will also need it on day 2 for BayeScan and BayPass.</p> <p>code</p> <pre><code>grep -v \"^#\" $DIR/data/starling_3populations.recode.vcf | cut -f1-3 | awk '{print $0\"\\t\"NR}' &gt; starling_3populations_SNPs.txt\n</code></pre> <p>Now let us jump back into the <code>pcadapt/</code> directory to continue working with our outliers. We select column 2 of the outlier file using the <code>AWK</code> command, which contains the number of outliers.</p> <p>code</p> <pre><code>cd $DIR/analysis/pcadapt\nawk '{print $2}' starlings_pcadapt_outliers.txt &gt; starlings_pcadapt_outliers_numbers.txt\n</code></pre> <p>Make a list of outlier SNPS IDs.</p> <p>code</p> <pre><code>awk 'FNR==NR{a[$1];next} (($4) in a)' starlings_pcadapt_outliers_numbers.txt ../starling_3populations_SNPs.txt | cut -f3 &gt; pcadapt_outlierSNPIDs.txt\nhead pcadapt_outlierSNPIDs.txt\n</code></pre> Output <pre><code>230955:72:-\n238881:46:+\n286527:46:-\n</code></pre>"},{"location":"day_1/3.vcftools/","title":"VCFtools Windowed Fst","text":"<p>The VCFTools manual is available here.</p> <p>Citation</p> <p>Danecek, P., Auton, A., Abecasis, G., Albers, C. A., Banks, E., DePristo, M. A., Handsaker, R. E., Lunter, G., Marth, G. T., Sherry, S. T., McVean, G., Durbin, R., &amp; Genomes Project Analysis, G. (2011). The variant call format and VCFtools. Bioinformatics, 27(15), 2156-2158. https://doi.org/10.1093/bioinformatics/btr330 </p> <p>Fst outliers help us to identify SNPs that behave abnormally in pairwise comparisons between populations.</p> <p>We first need to use our metadata file (currently defined by the environmental variable <code>METADATA</code>) to make three individual files containing only the list of individuals in each population. We can do this by subsetting our sample metadata file, using the <code>grep</code> command to select lines that match each population's name, and then using <code>awk</code> to keep only the first column of metadata, i.e., the sample names.</p> <p>code</p> <pre><code># Load modules\nmodule purge\nmodule load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1\n\n# Enter data directory\ncd $DIR/data\n\n# Subset metadata\ngrep \"Lemon\" $METADATA | awk '{print $1}' &gt; individuals_Lemon.txt\ngrep \"War\" $METADATA | awk '{print $1}' &gt; individuals_War.txt\ngrep \"Nowra\" $METADATA | awk '{print $1}' &gt; individuals_Nowra.txt\n</code></pre> <p>Now we can pick two populations to compare. Let's work with Lemon (short for Lemon Tree, QLD, AU) and War (short for Warnambool, VIC, AU) and perform an SNP-based Fst comparison.</p> <p>code</p> <pre><code>cd $DIR/analysis/vcftools_fst\n\nvcftools --vcf $VCF --weir-fst-pop $DIR/data/individuals_Lemon.txt --weir-fst-pop $DIR/data/individuals_War.txt --out lemon_war\n\nhead -n 5 lemon_war.weir.fst\n</code></pre> Output <pre><code>VCFtools - 0.1.15\n(C) Adam Auton and Anthony Marcketta 2009\n\nParameters as interpreted:\n        --vcf /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/starling_3populations.recode.vcf\n        --weir-fst-pop /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_Lemon.txt\n        --weir-fst-pop /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_War.txt\n        --keep /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_Lemon.txt\n        --keep /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_War.txt\n        --out lemon_war\n\nKeeping individuals in 'keep' list\nAfter filtering, kept 26 out of 39 Individuals\nOutputting Weir and Cockerham Fst estimates.\nWeir and Cockerham mean Fst estimate: 0.0067306\nWeir and Cockerham weighted Fst estimate: 0.015\nAfter filtering, kept 5007 out of a possible 5007 Sites\nRun Time = 0.00 seconds\n</code></pre> Output <pre><code>CHROM   POS     WEIR_AND_COCKERHAM_FST\nstarling4       107735  0.160891\nstarling4       137462  -0.0805785\nstarling4       151332  0.0524489\nstarling4       227887  0.0569961\n</code></pre> <p>The important column is column 5: the Weighted Fst, from Weir and Cockerham\u2019s 1984 publication.</p> <p>code</p> <pre><code>wc -l lemon_war.weir.fst </code></pre> Output <pre><code>5008 lemon_war.weir.fst\n</code></pre> <p>Notice how there are as many lines as there are SNPs in the data set, plus one for a header. It is always a good idea to check your output to ensure everything looks as expected!</p> <p>Next, instead of calculating pairwise population differentiation on an SNP-by-SNP basis, we will use a sliding window approach. The <code>--fst-window-size 50000</code> refers to the window size of the genome (in base pairs) in which we are calculating one value: all SNPs within this window are used to calculate Fst. The <code>--fst-window-step</code> option indicates how many base pairs the window is moving down the genome before calculating Fst for the second window, then the third, and so on. </p> <p>Sliding windows</p> <p>These sliding windows only work on ordered SNPs on the same chromosome/scaffold/contig. If your data is not set up like this (i.e., all your SNPs are on a single pseudo-chromosome), then this method is not appropriate for your data, as it will make an assumption about where the SNPs are located with respect to one another.</p> <p>code</p> <pre><code>vcftools --vcf $VCF --fst-window-size 50000 --fst-window-step 10000 --weir-fst-pop $DIR/data/individuals_Lemon.txt --weir-fst-pop $DIR/data/individuals_War.txt --out lemon_war\n\nhead -n 5 lemon_war.windowed.weir.fst\n</code></pre> Output <pre><code>VCFtools - 0.1.15\n(C) Adam Auton and Anthony Marcketta 2009\n\nParameters as interpreted:\n        --vcf /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/starling_3populations.recode.vcf\n        --fst-window-size 50000\n        --fst-window-step 10000\n        --weir-fst-pop /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_Lemon.txt\n        --weir-fst-pop /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_War.txt\n        --keep /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_Lemon.txt\n        --keep /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/individuals_War.txt\n        --out lemon_war\n\nKeeping individuals in 'keep' list\nAfter filtering, kept 26 out of 39 Individuals\nOutputting Windowed Weir and Cockerham Fst estimates.\nWeir and Cockerham mean Fst estimate: 0.0067306\nWeir and Cockerham weighted Fst estimate: 0.015\nAfter filtering, kept 5007 out of a possible 5007 Sites\nRun Time = 1.00 seconds\n</code></pre> Output <pre><code>CHROM   BIN_START       BIN_END N_VARIANTS      WEIGHTED_FST    MEAN_FST\nstarling4       60001   110000  1       0.160891        0.160891\nstarling4       70001   120000  1       0.160891        0.160891\nstarling4       80001   130000  1       0.160891        0.160891\nstarling4       90001   140000  2       -0.00374291     0.0401563\n</code></pre> <p>Notice the output is different.</p> <p>code</p> <pre><code>wc -l lemon_war.windowed.weir.fst </code></pre> Output <pre><code>10838\n</code></pre> <p>Notice the line count is different from the SNP-based Fst comparison; there are more lines in the sliding window-based Fst comparison. This is because there are more sliding windows across the chromosome in this data set than there are SNPs. Consider which of these steps is better for your data: the sliding window approach might not be the best in low-density SNP datasets.</p> <p>Now let us plot the Fst across the chromosome. To do this, we will add line numbers on our Fst file that will be used to order the Fst measurements across the x-axis of our Manhattan plot.</p> <p>Note</p> <p>X-axis values in the following plot are done using each outlier window's line number, as they are in order along the genome. Outlier windows are equally spaced, so line numbers are sufficient to capture the patterns along the genome. Consider that if you are plotting Fst values for SNPs (rather than windows), they may not be equally spaced along the genome, so SNP position may need to be used to make your Manhattan plots.</p> <p>code</p> <pre><code>awk '{print $0\"\\t\"NR}' ./lemon_war.windowed.weir.fst  &gt; lemon_war.windowed.weir.fst.edit\n\nmodule load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(\"ggplot2\")\nsetwd(\"~/outlier_analysis/analysis/vcftools_fst\")\nwindowed_fst &lt;- read.table(\"lemon_war.windowed.weir.fst.edit\", sep=\"\\t\", header=TRUE)\nstr(windowed_fst)\nquantile(windowed_fst$WEIGHTED_FST, probs = c(.95, .99, .999))\n</code></pre> Output <pre><code>'data.frame':   10837 obs. of  7 variables:\n$ CHROM       : chr  \"starling4\" \"starling4\" \"starling4\" \"starling4\" ...\n$ BIN_START   : int  60001 70001 80001 90001 100001 110001 120001 130001 140001 150001 ...\n$ BIN_END     : int  110000 120000 130000 140000 150000 160000 170000 180000 190000 200000 ...\n$ N_VARIANTS  : int  1 1 1 2 2 2 2 2 1 1 ...\n$ WEIGHTED_FST: num  0.16089 0.16089 0.16089 -0.00374 -0.00374 ...\n$ MEAN_FST    : num  0.1609 0.1609 0.1609 0.0402 0.0402 ...\n$ X1          : int  2 3 4 5 6 7 8 9 10 11 ...\n</code></pre> Output <pre><code>      95%       99%     99.9%\n0.1948850 0.3501600 0.5741306\n</code></pre> <p>Choose the quantile threshold above which SNPs will be classified as outliers. In the code block below, we chose 99% (i.e., the top 1% of SNP windows).</p> <p>code</p> <pre><code>pdf(\"fst_starlings_windowed.pdf\", width=10, height=5)\nggplot(windowed_fst, aes(x=X1, y=WEIGHTED_FST)) + geom_point() + geom_hline(yintercept=0.35, linetype=\"dashed\", color = \"red\") +\nlabs(x = \"Window Number\") +\ntheme_classic()\ndev.off()\nq()\n</code></pre> <p></p> <p>Finally, we will generate a list of outlier SNP IDs. We do this by selecting all SNPs located in the outlier windows.</p> <p>code</p> <pre><code>cd $DIR/analysis/vcftools_fst\n\ncat lemon_war.windowed.weir.fst.edit | awk '$5&gt;0.3501600' &gt; lemon_war.windowed.outliers\n\nwc -l lemon_war.windowed.outliers\n</code></pre> Output <pre><code>107 lemon_war_fst.windowed.outliers\n</code></pre> <p>code</p> <pre><code>cut -f1-3 lemon_war.windowed.outliers &gt; lemon_war.windowed.outliers.bed\n\nvcftools --vcf $VCF --bed lemon_war.windowed.outliers.bed --out fst_outliers --recode\n\ngrep -v \"^#\" fst_outliers.recode.vcf | awk '{print $3}' &gt; vcftoolsfst_outlierSNPIDs.txt\n\nwc -l vcftoolsfst_outlierSNPIDs.txt\n</code></pre> Output <pre><code>VCFtools - 0.1.15\n(C) Adam Auton and Anthony Marcketta 2009\n\nParameters as interpreted:\n        --vcf /nesi/nobackup/nesi02659/outlier_analysis_workshop/data/starling_3populations.recode.vcf\n        --out fst_outliers\n        --recode\n        --bed lemon_war.windowed.outliers.bed\n\nAfter filtering, kept 39 out of 39 Individuals\nOutputting VCF file...\n        Read 107 BED file entries.\nAfter filtering, kept 61 out of a possible 5007 Sites\nRun Time = 0.00 seconds\n</code></pre> Output <pre><code>61 vcftoolsfst_outlierSNPIDs.txt\n</code></pre> <p>We have a total of 61 outlier SNPs located across 107 outlier SNP windows.</p>"},{"location":"day_2/4.bayescan/","title":"BayeScan","text":"<p>The BayeScan manual is available here.</p> <p>Citation</p> <p>Foll, M., &amp; Gaggiotti, O. (2008). A genome-scan method to identify selected loci appropriate for both dominant and codominant markers: A Bayesian perspective. Genetics, 180(2), 977-993. https://doi.org/10.1534/genetics.108.092221 </p> <p>BayeScan identifies outlier SNPs based on allele frequencies.</p> <p>Prepare your terminal session</p> <p>Since you are likely using a new terminal session today, you will need to set the environment variables again to use them. Copy and paste the following command into your terminal to ensure you reference the correct variables.</p> <pre><code>DIR=~/outlier_analysis\nVCF=$DIR/data/starling_3populations.recode.vcf\nMETADATA=$DIR/data/starling_3populations_metadata.txt\n</code></pre> <p>First, we will need to convert our VCF to the Bayescan format. To do this, we will use the genetic file conversion program PGDspider. </p> <p>code</p> <pre><code>cd $DIR/programs\nwget http://www.cmpg.unibe.ch/software/PGDSpider/PGDSpider_2.1.1.5.zip\nunzip *.zip\n</code></pre> <p>We also need to create a new populations metadata file containing individual names in column 1 and population names in column 2.</p> <p>code</p> <pre><code>cd $DIR/data\ncut -f1,2 $METADATA &gt; starling_3populations_metadata_INDPOP.txt\n</code></pre> <p>Now, navigate to the directory where we will run our Bayescan analysis.</p> <p>code</p> <pre><code>cd $DIR/analysis/bayescan\n</code></pre> <p>We will run PGDSpider in two steps: </p> <ol> <li>Convert the VCF file to the PGD format </li> <li>Convert PGD format to Bayescan format. </li> </ol> <p>To do this, we will need to create a SPID file, which we will call <code>VCF_PGD.spid</code>, using the <code>nano</code> command.</p> <p>code</p> <pre><code>nano VCF_PGD.spid\n</code></pre> <p>Into the <code>VCG_PGD.spid</code> file, copy and paste the code below. On the line that starts with <code>VCF_PARSER_POP_FILE_QUESTION</code>, replace the example location with the location of your metadata file.</p> <p>Write the following into <code>VCF_PGD.spid</code></p> <pre><code># VCF Parser questions\nPARSER_FORMAT=VCF\n# Only output SNPs with a phred-scaled quality of at least:\nVCF_PARSER_QUAL_QUESTION=\n# Select population definition file:\nVCF_PARSER_POP_FILE_QUESTION=/home/&lt;user&gt;/outlier_analysis/data/starling_3populations_metadata_INDPOP.txt\n# What is the ploidy of the data?\nVCF_PARSER_PLOIDY_QUESTION=DIPLOID\n# Do you want to include a file with population definitions?\nVCF_PARSER_POP_QUESTION=true\n# Output genotypes as missing if the Phred-scale genotype quality is below:\nVCF_PARSER_GTQUAL_QUESTION=\n# Do you want to include non-polymorphic SNPs?\nVCF_PARSER_MONOMORPHIC_QUESTION=false\n# Only output following individuals (ind1, ind2, ind4, ...):\nVCF_PARSER_IND_QUESTION=\n# Only input following regions (refSeqName:start:end, multiple regions: whitespace separated):\nVCF_PARSER_REGION_QUESTION=\n# Output genotypes as missing if the read depth of a position for the sample is below:\nVCF_PARSER_READ_QUESTION=\n# Take most likely genotype if \"PL\" or \"GL\" is given in the genotype field?\nVCF_PARSER_PL_QUESTION=false\n# Do you want to exclude loci with only missing data?\nVCF_PARSER_EXC_MISSING_LOCI_QUESTION=false\n\n# PGD Writer questions\nWRITER_FORMAT=PGD\n</code></pre> <p>Replace path for <code>VCF_PARSER_POP_FILE_QUESTION</code></p> <p>Please remember to replace <code>&lt;user&gt;</code> with your user ID in the above or the absolute path to where your <code>_metadata_INDPOP.txt</code> is located!</p> Writing out files with <code>nano</code> <p>Once you have copied and pasted the above, press Ctrl + O, then press Enter to save your file. Finally, exit the program using Ctrl + X</p> <p>Run the two-step conversion.</p> <p>code</p> <pre><code>module purge\nmodule load Java/1.8.0_144\n\njava -Xmx1024m -Xms512m -jar $DIR/programs/PGDSpider_2.1.1.5/PGDSpider2-cli.jar -inputfile $VCF -inputformat VCF -outputfile starling_3populations.pgd -outputformat PGD -spid VCF_PGD.spid\n\njava -Xmx1024m -Xms512m -jar $DIR/programs/PGDSpider_2.1.1.5/PGDSpider2-cli.jar -inputfile starling_3populations.pgd -inputformat PGD -outputfile starling_3populations.bs -outputformat GESTE_BAYE_SCAN\n</code></pre> Output <pre><code>INFO  12:54:18 - load PGDSpider configuration from: /scale_wlg_nobackup/filesets/nobackup/nesi02659/outlier_analysis_workshop/programs/PGDSpider_2.1.1.5/spider.conf.xml\nWarning: Could not get charToByteConverterClass!\ninitialize convert process...\nread input file...\nread input file done.\nwrite output file...\nwrite output file done.\n</code></pre> Output <pre><code>INFO  12:57:05 - load PGDSpider configuration from: /scale_wlg_nobackup/filesets/nobackup/nesi02659/outlier_analysis_workshop/programs/PGDSpider_2.1.1.5/spider.conf.xml\nWarning: Could not get charToByteConverterClass!\nNo SPID file specified containing preanswered conversion questions!!!\n  A template SPID file was saved under: template_PGD_GESTE_BAYE_SCAN.spid\n  for more details see manual.\n\ninitialize convert process...\nread input file...\nread input file done.\nwrite output file...\nwrite output file done.\n</code></pre> <p>Let us have a quick look at what the input file looks like.</p> <p>code</p> <pre><code>head starling_3populations.bs\n</code></pre> Output <pre><code>[loci]=5007\n\n[populations]=3\n\n[pop]=1\n 1      12      2       9 3 \n 2      20      2       11 9 \n 3      18      2       15 3 \n 4      20      2       0 20 \n 5      22      2       2 20\n</code></pre> <p>So for each population, we have a note of how many REF and ALT alleles we have at each genomic variant position.</p> <p>An important note about additive genetic variance</p> <p>It is important to bear in mind how the input genetic data for outlier or association models is being interpreted by the model. When dealing with many of these models (and input genotype files), the assumption is that SNP effects are additive. This can be seen from, for example, the way we encode homozygous reference allele, heterozygous, and homozygous alternate allele as \"0\", \"1\", and \"2\" respectively in a BayPass input genofile. For the diploid organism (with two variant copies for each allele), one copy of a variant (i.e., heterozygous) is assumed to have half the effect of having two copies. However, what if the locus in question has dominance effects? This would mean the heterozygous form behaves the same as the homozygous dominant form, and it would be more appropriate to label these instead as \"0\", \"0\", \"1\". But with thousands, if not millions, of (most likely) completely unknown variants in a dataset, how can we possibly know? The answer is we cannot. Most models assume additive effects since this is the simplest assumption. However, by not factoring in dominance effects, we could be missing many important functional variants, as Reynolds et al. (2021) demonstrates. Genomics is full of caveats and pitfalls. While it provides new directions for exploration, it can also be overwhelming. Remember, your selection analysis does not have to be exhaustive. Just make sure it is fit for purpose within your study design. There is so much going on in just one genome; there is no way you can analyze everything in one go.</p> <p>Now let us set Bayescan to run. Use the command <code>nano bayescan_starling.sl</code> to create a Slurm script.</p> <p>code</p> <pre><code>#!/bin/bash -e\n#SBATCH --account=nesi02659\n#SBATCH --job-name=bayescan_starling.sl\n#SBATCH --time=12:00:00\n#SBATCH --mem=5GB\n#SBATCH --output=%x_%j.out\n#SBATCH --error=%x_%j.err\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=8\n#SBATCH --profile task\ncd ~/outlier_analysis/analysis/bayescan\n\n# Load bayescan\nmodule purge\nmodule load BayeScan/2.1-GCCcore-7.4.0\n\n# Run bayescan. \nbayescan_2.1 ./starling_3populations.bs -od ./ -threads 8 -n 5000 -thin 10 -nbp 20 -pilot 5000 -burn 50000 -pr_odds 10\n</code></pre> <p>Once you have copied and pasted the above, submit your job script to the scheduler to run using the command <code>sbatch bayescan_starling.sl</code>. It should take approximately 1 hour to run. Currently, everything is set to default. Read the manual to understand what the arguments/flags mean and how to refine them if needed.</p> <p>Identify outliers:</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(ggplot2)\nsetwd(\"~/outlier_analysis/analysis/bayescan\")\nsource(\"/opt/nesi/CS400_centos7_bdw/BayeScan/2.1-GCCcore-7.4.0/R\\ functions/plot_R.r\")\noutliers.bayescan &lt;- plot_bayescan(\"starling_3population_fst.txt\", FDR = 0.05)\noutliers.bayescan\nwrite.table(outliers.bayescan, file = \"bayescan_outliers.txt\")\n</code></pre> Output <pre><code>$outliers\n[1]  333  395 1367 2376 3789\n\n$nb_outliers\n[1] 5\n</code></pre> <p>And finally, let's do a quick check of convergence. For more information please refer to this documentation.</p> <p>code</p> <pre><code>library(coda)\nchain&lt;-read.table(\"starling_3population.sel\",header=TRUE)\nchain&lt;-chain[-c(1)]\nchain&lt;-mcmc(chain,thin=10)\nplot(chain)\nheidel.diag(chain, eps=0.1, pvalue=0.05)\nq()\n</code></pre> <p>Mapping Outliers</p> <p>code</p> <pre><code>cd $DIR/analysis/bayescan\n</code></pre> <p>SNP IDs are lost in BayeScan, line numbers are used as signifiers. We have previously created a list of SNPs in VCF and line numbers, which can be found at <code>$DIR/analysis/starling_3populations_SNPs.txt</code> which we will now reuse to generate a list of the outlier SNPS. We will also grab the line numbers from the BayeScan outliers output.</p> <p>code</p> <pre><code>  awk '{print $2}' bayescan_outliers.txt &gt; bayescan_outliers_numbers.txt\n</code></pre> <p>Create a list of outlier SNPs by matching the values in column 1 of the outliers list with those in column 4 of the entire SNP data list.</p> <p>code</p> <pre><code>awk 'FNR==NR{a[$1];next} (($4) in a)' bayescan_outliers_numbers.txt starling_3populations_SNPs.txt | cut -f3 &gt; bayescan_outlierSNPIDs.txt\n</code></pre> <p>Create a Bayescan log-plot and color the outliers in a different color.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(ggplot2)\nlibrary(dplyr)\nsetwd(\"~/outlier_analysis/analysis/bayescan\")\nbayescan.out &lt;- read.table(\"starling_3population_fst.txt\", header=TRUE)\nbayescan.out &lt;- bayescan.out %&gt;% mutate(ID = row_number())\nbayescan.outliers &lt;- read.table(\"bayescan_outliers_numbers.txt\", header=FALSE)\noutliers.plot &lt;- filter(bayescan.out, ID %in% bayescan.outliers[[\"V1\"]])\npng(\"bayescan_outliers.png\", width=600, height=350)\nggplot(bayescan.out, aes(x = log10.PO., y = alpha)) +\ngeom_vline(\nxintercept = 0,\nlinetype = \"dashed\",\ncolor = \"black\",\nsize = 3\n) +\ngeom_point(\nsize = 5\n) +\ngeom_point(\naes(x = log10.PO., y = alpha),\ndata = outliers.plot,\ncol = \"red\",\nfill = \"red\",\nsize = 5\n) +\nscale_x_continuous(limits = c(-1.3, 3.5)) +\ntheme_classic(base_size = 18) +\ntheme(axis.text = element_text(size = 18),\naxis.title = element_text(size = 22, face = \"bold\"))\ndev.off()\n</code></pre> <p></p>"},{"location":"day_2/5.baypass/","title":"BayPass","text":"<p>The BayPass manual can be found here.</p> <p>Citation</p> <p>Gautier, M. (2015). Genome-wide scan for adaptive divergence and association with population-specific covariates. Genetics, 201(4), 1555-1579. https://doi.org/10.1534/genetics.115.181453 </p> <p>BayPass requires that the allele frequency data be on a population, not an individual basis. The genotyping data file is organized as a matrix with nsnp rows and 2 \u2217 npop columns. The row field separator is a space. More precisely, each row corresponds to one marker, and the number of columns is twice the number of populations because each pair of numbers corresponds to each allele (or read counts for PoolSeq experiment) counts in one population.</p> <p>To generate this population gene count data, we will work with the PLINK file. First, we have to fix the individual ID and population labels, as PLINK has pulled these directly from the VCF, which has no population information. We aim for population in column 1 and individual ID in column 2.</p> <p>code</p> <pre><code>cd $DIR/data\n\nawk '{print $2,\"\\t\",$1}' $METADATA &gt; starling_3populations_metadata_POPIND.txt\n\ncd $DIR/analysis/baypass\n\nPLINK=$DIR/data/starling_3populations.plink.ped\n\n#remove first 2 columns\ncut -f 3- $PLINK &gt; x.delete\n\npaste $DIR/data/starling_3populations_metadata_POPIND.txt x.delete &gt; starling_3populations.plink.ped\nrm x.delete cp $DIR/data/starling_3populations.plink.map .\ncp $DIR/data/starling_3populations.plink.log .\n</code></pre> <p>Run the population-based allele frequency calculations.</p> <p>code</p> <pre><code>module load PLINK/1.09b6.16 plink --file starling_3populations.plink --allow-extra-chr --freq counts --family --out starling_3populations\n</code></pre> Output <pre><code>PLINK v1.90b6.16 64-bit (19 Feb 2020)          www.cog-genomics.org/plink/1.9/\n(C) 2005-2020 Shaun Purcell, Christopher Chang   GNU General Public License v3\nLogging to starling_3populations.log.\nOptions in effect:\n  --allow-extra-chr\n  --family\n  --file starling_3populations.plink\n  --freq counts\n  --out starling_3populations\n\n128824 MB RAM detected; reserving 64412 MB for main workspace.\n.ped scan complete (for binary autoconversion).\nPerforming single-pass .bed write (5007 variants, 39 people).\n--file: starling_3populations-temporary.bed +\nstarling_3populations-temporary.bim + starling_3populations-temporary.fam\nwritten.\n5007 variants loaded from .bim file.\n39 people (0 males, 0 females, 39 ambiguous) loaded from .fam.\nAmbiguous sex IDs written to starling_3populations.nosex .\n--family: 3 clusters defined.\nUsing 1 thread (no multithreaded calculations invoked).\nBefore main variant filters, 39 founders and 0 nonfounders present.\nCalculating allele frequencies... done.\nTotal genotyping rate is 0.723331.\nNote: --freq 'counts' modifier has no effect on cluster-stratified report.\n--freq: Cluster-stratified allele frequencies (founders only) written to\nstarling_3populations.frq.strat .\n</code></pre> <p>Manipulate file so it has BayPass format, numbers set for PLINK output file, and population number for column count.</p> <p>code</p> <pre><code>tail -n +2 starling_3populations.frq.strat | awk '{ $9 = $8 - $7 } 1' | awk '{print $7,$9}' | tr \"\\n\" \" \" | sed 's/ /\\n/6; P; D' &gt; starling_3populations_baypass.txt\n</code></pre> <p>Now we can run Baypass. It should run for about 5 minutes.</p> <p>code</p> <pre><code>module purge\nmodule load BayPass/2.31-intel-2022a\n\ncd $DIR/analysis/baypass\n\ni_baypass -npop 3 -gfile ./starling_3populations_baypass.txt -outprefix starling_3populations_baypass -nthreads 2\n</code></pre> <p>Run in R to make the anapod data. First, let us quickly download the utilities we need.</p> <p>code</p> <pre><code>cd $DIR/programs\ngit clone https://github.com/andbeck/BayPass.git\n</code></pre> <p>Now let us generate some simulated data based on the parameters calculated from our genetic data.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(\"ape\")\nsetwd(\"~/outlier_analysis/analysis/baypass\")\nsource(\"../../programs/BayPass/baypass_utils.R\")\nomega &lt;- as.matrix(read.table(\"starling_3populations_baypass_mat_omega.out\"))\npi.beta.coef &lt;- read.table(\"starling_3populations_baypass_summary_beta_params.out\", header = TRUE)\nbta14.data &lt;- geno2YN(\"starling_3populations_baypass.txt\")\nsimu.bta &lt;- simulate.baypass(omega.mat = omega, nsnp = 5000, sample.size = bta14.data$NN, beta.pi = pi.beta.coef$Mean, pi.maf = 0, suffix = \"btapods\")\nq()\n</code></pre> <p>We now have the simulated genetic data. We can find the XtX statistic threshold above which we will consider genetic sites an outlier.</p> <p>code</p> <pre><code>module purge\nmodule load BayPass/2.31-intel-2022a\n\ncd $DIR/analysis/baypass\n\ni_baypass -npop 3 -gfile G.btapods -outprefix G.btapods -nthreads 2\n</code></pre> <p>XtX calibration; get the pod XtX threshold.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>setwd(\"~/outlier_analysis/analysis/baypass\")\nsource(\"~/outlier_analysis/programs/BayPass/baypass_utils.R\")\nlibrary(\"ape\")\nlibrary(\"corrplot\")\npod.xtx &lt;- read.table(\"G.btapods_summary_pi_xtx.out\", header = T)\n</code></pre> <p>We compute the 1% threshold for the simulated neutral data.</p> <p>code</p> <pre><code>pod.thresh &lt;- quantile(pod.xtx$M_XtX ,probs = 0.99)\npod.thresh\nq()\n</code></pre> Output <pre><code>     99% \n6.365673 \n</code></pre> <p>Your values may be slightly different as the simulated data will not be identical.</p> <p>Next, we filter the data for the outlier SNPs by identifying those above the threshold.</p> <p>code</p> <pre><code>cat starling_3populations_baypass_summary_pi_xtx.out | awk '$4&gt;6.258372' &gt; baypass_outliers.txt\n</code></pre> <p>SNP IDs are lost in BayeScan, line numbers are used as signifiers. We have previously created a list of SNPs in VCF and line numbers, which can be found at <code>$DIR/analysis/starling_3populations_SNPs.txt</code> which we will now reuse to generate a list of the outlier SNPS.</p> <p>code</p> <pre><code>awk 'FNR==NR{a[$1];next} (($4) in a)' baypass_outliers.txt $DIR/analysis/starling_3populations_SNPs.txt | cut -f3 &gt; baypass_outlierSNPIDs.txt\nwc -l baypass_outlierSNPIDs.txt\n</code></pre> Output <pre><code>39 baypass_outlierSNPIDs.txt\n</code></pre> <p>Now let's find SNPs that are statistically associated with wingspan. To do this, we have to go back to the metadata and compute the average wingspan of each of our populations and place them in a file.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>setwd(\"~/outlier_analysis/analysis/baypass\")\nmetadata &lt;- read.table(\"../../data/starling_3populations_metadata.txt\", sep = \"\\t\", header = FALSE)\nstr(metadata)\npop_metadata &lt;- aggregate(V3 ~ V2, data = metadata, mean)\n# Check mean wingspan\npop_metadata[, 2]\nwrite(pop_metadata[, 2], \"pop_mean_wingspan.txt\")\nq()\n</code></pre> Output: <pre><code>[1] 14.89805 19.63306 22.09655\n</code></pre> <p>Now we can run the third and final BayPass job, which will let us know which SNPs are statistically associated with wingspan.</p> <p>code</p> <pre><code>module purge\nmodule load BayPass/2.31-intel-2022a\n\ncd $DIR/analysis/baypass\n\ni_baypass -npop 3 -gfile starling_3populations_baypass.txt -efile pop_mean_wingspan.txt -scalecov -auxmodel -nthreads 2 -omegafile starling_3populations_baypass_mat_omega.out -outprefix starling_3populations_baypass_wing\n</code></pre> <p>Next we plot the outliers. We are choosing a BF threshold of 20 dB, which indicates \"Strong evidence for alternative hypothesis.\"</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>library(ggplot2)\nsetwd(\"~/outlier_analysis/analysis/baypass\")\ncovaux.snp.res.mass &lt;- read.table(\"starling_3populations_baypass_wing_summary_betai.out\", header = T)\ncovaux.snp.xtx.mass &lt;- read.table(\"starling_3populations_baypass_summary_pi_xtx.out\", header = T)\npdf(\"Baypass_plots.pdf\")\nlayout(matrix(1:3,3,1))\nplot(covaux.snp.res.mass$BF.dB.,xlab=\"Mass\",ylab=\"BFmc (in dB)\")\nabline(h=20, col=\"red\")\nplot(covaux.snp.res.mass$M_Beta,xlab=\"SNP\",ylab=expression(beta~\"coefficient\"))\nplot(covaux.snp.xtx.mass$M_XtX, xlab=\"SNP\",ylab=\"XtX corrected for SMS\")\ndev.off()\n</code></pre> <p></p> <p>Finally, let's generate the list of phenotype-associated SNP IDs. </p> <p>code</p> <pre><code>cat starling_3populations_baypass_wing_summary_betai.out | awk '$6&gt;20' &gt; starling_3populations_baypass_wing_BF20.txt\n\nwc -l starling_3populations_baypass_wing_BF20.txt\n</code></pre> Output <pre><code>45 starling_3populations_baypass_wing_BF20.txt\n</code></pre> <p>Filter the data sets for SNPS above BFmc threshold. These are out outlier SNPs that are associated with wingspan.</p> <p>code</p> <pre><code>awk 'FNR==NR{a[$2];next} (($4) in a)' starling_3populations_baypass_wing_BF20.txt starling_3populations_SNPs.txt | cut -f3 &gt; baypass_wingspan_outlierSNPIDs.txt\n\ncomm -12 &lt;(sort baypass_wingspan_outlierSNPIDs.txt) &lt;(sort baypass_outlierSNPIDs.txt) &gt; double_outliers.txt\n\nwc -l double_outliers.txt\n</code></pre> Output <pre><code>21 double_outliers.txt\n</code></pre>"},{"location":"day_2/6.conclude/","title":"Workshop conclusion","text":""},{"location":"day_2/6.conclude/#comparing-outlier-overlap","title":"Comparing outlier overlap","text":"<p>Now we will make an UpSet plot to compare the overlap of outliers detected over our different methods.</p> <p>code</p> <pre><code>cd $DIR/analysis/summary\nln -s $DIR/analysis/pcadapt/pcadapt_outlierSNPIDs.txt .\nln -s $DIR/analysis/vcftools_fst/vcftoolsfst_outlierSNPIDs.txt .\nln -s $DIR/analysis/bayescan/bayescan_outlierSNPIDs.txt .\nln -s $DIR/analysis/baypass/baypass_outlierSNPIDs.txt .\nln -s $DIR/analysis/baypass/baypass_wingspan_outlierSNPIDs.txt .\n</code></pre> <p>Now we have a copy of all the SNP IDs for each of our outlier analyses, let's use the R package UpSetR to plot the overlap.</p> <p>code</p> <pre><code>module load R-bundle-Bioconductor/3.15-gimkl-2022a-R-4.2.1\nR\n</code></pre> <p>code</p> <pre><code>setwd(\"~/outlier_analysis/analysis/summary\")\npcadapt &lt;- scan(\"pcadapt_outlierSNPIDs.txt\", what = \"\", quiet = TRUE)\nvcftools &lt;- scan(\"vcftoolsfst_outlierSNPIDs.txt\", what = \"\", quiet = TRUE)\nbayescan &lt;- scan(\"bayescan_outlierSNPIDs.txt\", what = \"\", quiet = TRUE)\nbaypass &lt;- scan(\"baypass_outlierSNPIDs.txt\", what = \"\", quiet = TRUE)\nbaypass_wing &lt;- scan(\"baypass_wingspan_outlierSNPIDs.txt\", what = \"\", quiet = TRUE)  all_outliers &lt;- list(\nPCAdapt = pcadapt, VCFtools = vcftools, Bayescan = bayescan, Baypass = baypass, BaypassWing = baypass_wing\n)\nlibrary(UpSetR)\npdf(\"All_outliers_upsetplot.pdf\")\nupset(\ndata = fromList(all_outliers), order.by = \"freq\", empty.intersections = \"on\", point.size = 3.5, line.size = 2, mainbar.y.label = \"Outlier Count\", sets.x.label = \"Total Outliers\", text.scale = c(1.3, 1.3, 1, 1, 2, 1.3), number.angles = 30, nintersects = 11\n) dev.off() </code></pre> <p></p> <p>Let's have a discussion about the overlap between these five outlier groups.</p> <p>And if you want to get really fancy, you may even want to plot your variants at their location around your genome in a circle plot!</p>"},{"location":"day_2/6.conclude/#workshop-end-discussion","title":"Workshop End discussion","text":"<p>A brief period of group discussion on one of the days about research question framing and grant integration.</p>"},{"location":"day_2/6.conclude/#outlier-analysis-meta-analysis","title":"Outlier Analysis Meta-analysis","text":"<p>This workshop was conceived as part of a larger project. The goal is to compile as many genomics data sets with identified outliers as possible. While identifying outliers is an interesting and often necessary component of singular genomics projects, there is also a lot to be gained from looking at patterns across neutral versus outlier genetic variants across many different projects and taxa.</p> <p>One of the goals of this project is to compile a collection of genetic data sets information. Most of these will come from pre-published work, but attendees of this workshop may opt in their data sets should they want to have their data involved in this project. </p> <p>Ideally, for the meta-analysis, we need:</p> <ul> <li>VCF file with all genetic variants (SNPS) </li> <li>List of which variants are outliers and what type of outliers these are</li> <li>OPTIONAL but PREFERRED: Reference genome that has been annotated and well scaffolded </li> </ul>"}]}