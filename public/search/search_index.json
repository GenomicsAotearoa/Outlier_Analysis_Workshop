{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"h1 {text-align: center;} Outlier Analysis Workshop Preamble \u00b6 There are lots of interesting patterns that you can extract from genetic variant data. This can include patterns of linkage, balancing selection, or even inbreeding signals. One of the most common ones is to try find sites on the genome that are under selection. The following vignette will take you through the basics of genetic selection analysis. Day Lesson overview Day 1 Introduction PCAdapt VCFtools Setup for Bayescan & Baypass Day 2 Bayescan Bayepass Compile results Group discussions Meta-analysis contribution Schedule Day 1 Day 2 Time Event 9:00am Introductory slides 9:30am Download data 10:00am Morning tea 10:15am PCAdapt 12:00pm Lunch 1:00pm VCFtools 2:00pm Afternoon tea 2:15pm VCFtools continued Setup for Bayescan & Baypass Time Event 9:00am Bayescan 10:00am Morning tea 10:15am Bayescan (continued) Baypass 12:00pm Lunch 1:00pm Baypass (continued) 2:00pm Afternoon tea 2:15pm Compile results Group discussions Meta-analysis contribution Funding The project has been funded by the AES ERC Networking Grant Scheme and GSA .","title":"Home"},{"location":"#preamble","text":"There are lots of interesting patterns that you can extract from genetic variant data. This can include patterns of linkage, balancing selection, or even inbreeding signals. One of the most common ones is to try find sites on the genome that are under selection. The following vignette will take you through the basics of genetic selection analysis. Day Lesson overview Day 1 Introduction PCAdapt VCFtools Setup for Bayescan & Baypass Day 2 Bayescan Bayepass Compile results Group discussions Meta-analysis contribution Schedule Day 1 Day 2 Time Event 9:00am Introductory slides 9:30am Download data 10:00am Morning tea 10:15am PCAdapt 12:00pm Lunch 1:00pm VCFtools 2:00pm Afternoon tea 2:15pm VCFtools continued Setup for Bayescan & Baypass Time Event 9:00am Bayescan 10:00am Morning tea 10:15am Bayescan (continued) Baypass 12:00pm Lunch 1:00pm Baypass (continued) 2:00pm Afternoon tea 2:15pm Compile results Group discussions Meta-analysis contribution Funding The project has been funded by the AES ERC Networking Grant Scheme and GSA .","title":"Preamble"},{"location":"day_1/1.intro_and_setup/","text":"A brief introduction to Genetic Outlier and Association Analysis \u00b6 When we look through a genome to try find loci that are under divergent selection, we often conduct what is called outlier or association analyses. Outlier analysis requires just knowledge of the genetics of your samples (plus sample metadata, for example population groupings), and tries to find loci that behave very differently from the underlying patterns across the genome (with the assumption being that the rest of the genome represents patterns of neutral genetic diveristy) 1 . Meanwhile association analysis require some sort of covariate data, and tests whether there are any genetic variants statistically associated with this new data (you may have heard the term GWAS ). This covariate data can come in the form of phenotype data (e.g. morphology, disease status, physiology measures), or could be spatial (e.g. environmental, climate). Association tests look for sites in the genome where the presence or absence of a variant is highly correlated with the values in the co-variate data, usually through some regression type analysis. Throughout this vignette I will refer to outlier and association analysis collectively as selection analysis. There are a lot of programs that exist currently. You can find a very long (though not exhaustive) list of them here . This vignette still start by covering some very simple outlier analyses: PCAdapt , a program that can depect genetic marker outliers without having population 2 designations, using a Principle Component Analysis (PCA) approach. F ST outlier analysis, an approach that uses pairwise comparisons between two populations and the fixation index metric to assess each genetic marker. Next we will conduct some more advanced outlier analysis: Bayescan a program. Baypass , a program that elaborates on the bayenv model (another popular association analysis program). We'll cover the pre-processing of program specific input files, how to run the programs, how to visualise the output and also in some cases we'll need to take extra steps to map the genetic markers of interest back to the SNP data. Reduced representation verses whole genome sequencing Completing outlier analysis is possible and often done on reduced representation data. It is important to remember how your genome coverage (the number of genome variant sites / the genome length) 1 will affect your results and interpretation. Often with WGS data, you will see well resolved 'peaks' with a fairly smooth curve of points leading up to it either side. From this we often infer that the highest point is the genetic variant of interest, and the other sites either side of that exhibit signals of selection because they reside close to, and thus are linked, to the variant of interest. However, consider that even in WGS data, unless we have every single genetic variant represented (which may not be the case, depending on our variant calling and filtering parameters) it is possible that the genetic variant of interest that we have identified is not the main one, but is simply another neighbouring linked SNP to one that is not represented in the data. This problem becomes even more relevant with reduced representation sequencing (RRS), for which the genome coverage may be extremely patchy 3 . Thus with all outlier analysis, but especially so for those using RRS data, remember that your flagged outliers are not exhaustive, and may themselves only be liked to the variant that is truely under selection. Define your working directory for this project and the VCF file location: \u00b6 code mkdir /nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis DIR = /nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis cd $DIR Our data tree will look like: outlier_analysis/ \u251c\u2500\u2500 analysis \u2502 \u251c\u2500\u2500 bayescan \u2502 \u251c\u2500\u2500 baypass \u2502 \u251c\u2500\u2500 pcadapt \u2502 \u251c\u2500\u2500 summary \u2502 \u2514\u2500\u2500 vcftools_fst \u251c\u2500\u2500 data \u251c\u2500\u2500 programs \u2514\u2500\u2500 workshop_material So lets set up our directories to match this code mkdir -p { analysis/ { bayescan,baypass,pcadapt,summary,vcftools_fst } ,data,programs,workshop_material } Project data \u00b6 The data provided in this workshop contains 5007 SNPs loci for across 39 individuals (13 individuals each from 3 different locations). There is some missingness (i.e. missing SNP calls) within this data. There is also a metadata file, that contains the individuals unique IDs, their assigned populations, and a wingspan measurement for each individual. Let's grab this data from the project's git resository, place the data files into our data directory, and define the environmental variables VCF and METADATA with the locations of the genetic variant and metadata files respectively. code cd $DIR /workshop_material git clone https://github.com/katarinastuart/Ev1_SelectionMetaAnalysis.git cp $DIR /workshop_material/Ev1_SelectionMetaAnalysis/workshop_files/* $DIR /data VCF = $DIR /data/starling_3populations.recode.vcf METADATA = $DIR /data/starling_3populations_metadata.txt Working with your own data Alternatively, you can also use your own data for this workshop. If so, it is a good idea to thin your SNP dataset down to roughly 5,000 SNPs to ensure compute times are not too long. If you have more than 50 individuals you may also want to reduce this too. If you would like to do this, just place your genetic variant and metadata file in the data directory and define VCF and METADATA based on their names. Across this workshop, we will need the genetic data to be in several different formats. Let's prepare that now. First we convert the VCF to PLINK, and then to BED. code cd $DIR /data module load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1 module load PLINK/1.09b6.16 vcftools --vcf $VCF --plink --out starling_3populations.plink plink --file starling_3populations.plink --make-bed --noweb --out starling_3populations It is very important then to account for any population substructure. There are many different ways to approach this: refer to introduction slides for some guidance. \u21a9 \u21a9 I will say population for simplicity throughout this vignette. However, equally we can test for differences between sample sites, subpopulations, and other types of groupings. What counts as one 'group' of organisms will be dependent on your study system or study question. \u21a9 You may also want to consider linkage blocks. \u21a9","title":"A brief introduction to Genetic Outlier and Association Analysis"},{"location":"day_1/1.intro_and_setup/#a-brief-introduction-to-genetic-outlier-and-association-analysis","text":"When we look through a genome to try find loci that are under divergent selection, we often conduct what is called outlier or association analyses. Outlier analysis requires just knowledge of the genetics of your samples (plus sample metadata, for example population groupings), and tries to find loci that behave very differently from the underlying patterns across the genome (with the assumption being that the rest of the genome represents patterns of neutral genetic diveristy) 1 . Meanwhile association analysis require some sort of covariate data, and tests whether there are any genetic variants statistically associated with this new data (you may have heard the term GWAS ). This covariate data can come in the form of phenotype data (e.g. morphology, disease status, physiology measures), or could be spatial (e.g. environmental, climate). Association tests look for sites in the genome where the presence or absence of a variant is highly correlated with the values in the co-variate data, usually through some regression type analysis. Throughout this vignette I will refer to outlier and association analysis collectively as selection analysis. There are a lot of programs that exist currently. You can find a very long (though not exhaustive) list of them here . This vignette still start by covering some very simple outlier analyses: PCAdapt , a program that can depect genetic marker outliers without having population 2 designations, using a Principle Component Analysis (PCA) approach. F ST outlier analysis, an approach that uses pairwise comparisons between two populations and the fixation index metric to assess each genetic marker. Next we will conduct some more advanced outlier analysis: Bayescan a program. Baypass , a program that elaborates on the bayenv model (another popular association analysis program). We'll cover the pre-processing of program specific input files, how to run the programs, how to visualise the output and also in some cases we'll need to take extra steps to map the genetic markers of interest back to the SNP data. Reduced representation verses whole genome sequencing Completing outlier analysis is possible and often done on reduced representation data. It is important to remember how your genome coverage (the number of genome variant sites / the genome length) 1 will affect your results and interpretation. Often with WGS data, you will see well resolved 'peaks' with a fairly smooth curve of points leading up to it either side. From this we often infer that the highest point is the genetic variant of interest, and the other sites either side of that exhibit signals of selection because they reside close to, and thus are linked, to the variant of interest. However, consider that even in WGS data, unless we have every single genetic variant represented (which may not be the case, depending on our variant calling and filtering parameters) it is possible that the genetic variant of interest that we have identified is not the main one, but is simply another neighbouring linked SNP to one that is not represented in the data. This problem becomes even more relevant with reduced representation sequencing (RRS), for which the genome coverage may be extremely patchy 3 . Thus with all outlier analysis, but especially so for those using RRS data, remember that your flagged outliers are not exhaustive, and may themselves only be liked to the variant that is truely under selection.","title":"A brief introduction to Genetic Outlier and Association Analysis"},{"location":"day_1/1.intro_and_setup/#define-your-working-directory-for-this-project-and-the-vcf-file-location","text":"code mkdir /nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis DIR = /nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis cd $DIR Our data tree will look like: outlier_analysis/ \u251c\u2500\u2500 analysis \u2502 \u251c\u2500\u2500 bayescan \u2502 \u251c\u2500\u2500 baypass \u2502 \u251c\u2500\u2500 pcadapt \u2502 \u251c\u2500\u2500 summary \u2502 \u2514\u2500\u2500 vcftools_fst \u251c\u2500\u2500 data \u251c\u2500\u2500 programs \u2514\u2500\u2500 workshop_material So lets set up our directories to match this code mkdir -p { analysis/ { bayescan,baypass,pcadapt,summary,vcftools_fst } ,data,programs,workshop_material }","title":"Define your working directory for this project and the VCF file location:"},{"location":"day_1/1.intro_and_setup/#project-data","text":"The data provided in this workshop contains 5007 SNPs loci for across 39 individuals (13 individuals each from 3 different locations). There is some missingness (i.e. missing SNP calls) within this data. There is also a metadata file, that contains the individuals unique IDs, their assigned populations, and a wingspan measurement for each individual. Let's grab this data from the project's git resository, place the data files into our data directory, and define the environmental variables VCF and METADATA with the locations of the genetic variant and metadata files respectively. code cd $DIR /workshop_material git clone https://github.com/katarinastuart/Ev1_SelectionMetaAnalysis.git cp $DIR /workshop_material/Ev1_SelectionMetaAnalysis/workshop_files/* $DIR /data VCF = $DIR /data/starling_3populations.recode.vcf METADATA = $DIR /data/starling_3populations_metadata.txt Working with your own data Alternatively, you can also use your own data for this workshop. If so, it is a good idea to thin your SNP dataset down to roughly 5,000 SNPs to ensure compute times are not too long. If you have more than 50 individuals you may also want to reduce this too. If you would like to do this, just place your genetic variant and metadata file in the data directory and define VCF and METADATA based on their names. Across this workshop, we will need the genetic data to be in several different formats. Let's prepare that now. First we convert the VCF to PLINK, and then to BED. code cd $DIR /data module load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1 module load PLINK/1.09b6.16 vcftools --vcf $VCF --plink --out starling_3populations.plink plink --file starling_3populations.plink --make-bed --noweb --out starling_3populations It is very important then to account for any population substructure. There are many different ways to approach this: refer to introduction slides for some guidance. \u21a9 \u21a9 I will say population for simplicity throughout this vignette. However, equally we can test for differences between sample sites, subpopulations, and other types of groupings. What counts as one 'group' of organisms will be dependent on your study system or study question. \u21a9 You may also want to consider linkage blocks. \u21a9","title":"Project data"},{"location":"day_1/2.pcadapt/","text":"PCAdapt \u00b6 PCAdapt uses an ordinatio approach to find sites in a data set that are outliers with respect to background population structure. The PCAdapt manual is available here . Citation Priv\u00e9, F., Luu, K., Vilhj\u00e1lmsson, B. J., & Blum, M. G.B. (2020). Performing highly efficient genome scans for local adaptation with R package pcadapt version 4. Molecular Biology and Evolution. First, let's install PCAdapt and set your working directory. code module load R / 4.1 . 0 - gimkl -2020 a R install.packages ( \"pcadapt\" ) library ( \"pcadapt\" ) setwd ( \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/analysis/pcadapt/\" ) Now let's load in the data - PCAdapt uses bed file types. code starling_bed <- \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/data/starling_3populations.bed\" starlings_pcadapt <- read.pcadapt ( starling_bed , type = \"bed\" ) Produce K plot code starlings_pcadapt_kplot <- pcadapt ( input = starlings_pcadapt , K = 20 ) pdf ( \"pcadapt_starlings_kplot.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"screeplot\" ) dev.off () K value of 3 is most appropriate, as this is the value of K after which the curve starts to flatten out more. code starlings_pcadapt_pca <- pcadapt ( starlings_pcadapt , K = 3 ) summary ( starlings_pcadapt_pca ) Output Length Class Mode scores 117 -none- numeric singular.values 3 -none- numeric loadings 15021 -none- numeric zscores 15021 -none- numeric af 5007 -none- numeric maf 5007 -none- numeric chi2.stat 5007 -none- numeric stat 5007 -none- numeric gif 1 -none- numeric pvalues 5007 -none- numeric pass 4610 -none- numeric Investigate axis projections: code poplist.names <- c ( rep ( \"Lemon\" , 13 ), rep ( \"Warrnambool\" , 13 ), rep ( \"Nowra\" , 13 )) print ( poplist.names ) pdf ( \"pcadapt_starlings_projection1v2.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"scores\" , i = 1 , j = 2 , pop = poplist.names ) dev.off () pdf ( \"pcadapt_starlings_projection5v7.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"scores\" , i = 5 , j = 7 , pop = poplist.names ) dev.off () Ignore the warning: Ignore the warning: Use of df$Pop is discouraged. Use Pop instead. Investigate manhattan and Q-Qplot: Manhattan plots A way to visualise the GWAS (genome-wide association study) p-values (or other statistical values) at each SNP locus along the genome. Q-Qplots A quick way to visually check if your residuals are normally distributed. Check out more information here . code pdf ( \"pcadapt_starlings_manhattan.pdf\" ) plot ( starlings_pcadapt_pca , option = \"manhattan\" ) dev.off () pdf ( \"pcadapt_starlings_qqplot.pdf\" ) plot ( starlings_pcadapt_pca , option = \"qqplot\" ) dev.off () Plotting and correcting the pvalues code starling_pcadapt_pvalues <- as.data.frame ( starlings_pcadapt_pca $ pvalues ) library ( \"ggplot2\" ) pdf ( \"pcadapt_starlings_pvalues.pdf\" ) hist ( starlings_pcadapt_pca $ pvalues , xlab = \"p-values\" , main = NULL , breaks = 50 , col = \"orange\" ) dev.off () code starlings_pcadapt_padj <- p.adjust ( starlings_pcadapt_pca $ pvalues , method = \"bonferroni\" ) alpha <- 0.1 outliers <- which ( starlings_pcadapt_padj < alpha ) length ( outliers ) write.table ( outliers , file = \"starlings_pcadapt_outliers.txt\" ) length ( outliers ) Output [1] 3 After this, we will be jumping out of R and back into the command line by using the command: code q () Mapping Outliers: PCAdapt \u00b6 Finding the SNP ID of the outlier variants code cd $DIR /analysis The first thing we will do is create list of SNPs in VCF, assign line numbers that can be used to find matching line numbers in outliers (SNP ID is lost in PCadapt & Bayescan, line numbers used as signifiers). We create this in the analysis folder because we will use it for more than just mapping the outlier SNPs for PCAdapt. code grep -v \"^#\" $DIR /data/starling_3populations.recode.vcf | cut -f1-3 | awk '{print $0\"\\t\"NR}' > starling_3populations_SNPs.txt Now let's jump back into the pcadapt directory to continue working with our outliers. We grab column 2 of the outlier file using the AWK command, which contain the number of the outliers code cd $DIR /analysis/pcadapt awk '{print $2}' starlings_pcadapt_outliers.txt > starlings_pcadapt_outliers_numbers.txt We now make a list of outlier SNPS ID's code awk 'FNR==NR{a[$1];next} (($4) in a)' starlings_pcadapt_outliers_numbers.txt ../starling_3populations_SNPs.txt | cut -f3 > pcadapt_outlierSNPIDs.txt head pcadapt_outlierSNPIDs.txt Output 230955:72:- 238881:46:+ 286527:46:-","title":"PCAdapt"},{"location":"day_1/2.pcadapt/#pcadapt","text":"PCAdapt uses an ordinatio approach to find sites in a data set that are outliers with respect to background population structure. The PCAdapt manual is available here . Citation Priv\u00e9, F., Luu, K., Vilhj\u00e1lmsson, B. J., & Blum, M. G.B. (2020). Performing highly efficient genome scans for local adaptation with R package pcadapt version 4. Molecular Biology and Evolution. First, let's install PCAdapt and set your working directory. code module load R / 4.1 . 0 - gimkl -2020 a R install.packages ( \"pcadapt\" ) library ( \"pcadapt\" ) setwd ( \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/analysis/pcadapt/\" ) Now let's load in the data - PCAdapt uses bed file types. code starling_bed <- \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/data/starling_3populations.bed\" starlings_pcadapt <- read.pcadapt ( starling_bed , type = \"bed\" ) Produce K plot code starlings_pcadapt_kplot <- pcadapt ( input = starlings_pcadapt , K = 20 ) pdf ( \"pcadapt_starlings_kplot.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"screeplot\" ) dev.off () K value of 3 is most appropriate, as this is the value of K after which the curve starts to flatten out more. code starlings_pcadapt_pca <- pcadapt ( starlings_pcadapt , K = 3 ) summary ( starlings_pcadapt_pca ) Output Length Class Mode scores 117 -none- numeric singular.values 3 -none- numeric loadings 15021 -none- numeric zscores 15021 -none- numeric af 5007 -none- numeric maf 5007 -none- numeric chi2.stat 5007 -none- numeric stat 5007 -none- numeric gif 1 -none- numeric pvalues 5007 -none- numeric pass 4610 -none- numeric Investigate axis projections: code poplist.names <- c ( rep ( \"Lemon\" , 13 ), rep ( \"Warrnambool\" , 13 ), rep ( \"Nowra\" , 13 )) print ( poplist.names ) pdf ( \"pcadapt_starlings_projection1v2.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"scores\" , i = 1 , j = 2 , pop = poplist.names ) dev.off () pdf ( \"pcadapt_starlings_projection5v7.pdf\" ) plot ( starlings_pcadapt_kplot , option = \"scores\" , i = 5 , j = 7 , pop = poplist.names ) dev.off () Ignore the warning: Ignore the warning: Use of df$Pop is discouraged. Use Pop instead. Investigate manhattan and Q-Qplot: Manhattan plots A way to visualise the GWAS (genome-wide association study) p-values (or other statistical values) at each SNP locus along the genome. Q-Qplots A quick way to visually check if your residuals are normally distributed. Check out more information here . code pdf ( \"pcadapt_starlings_manhattan.pdf\" ) plot ( starlings_pcadapt_pca , option = \"manhattan\" ) dev.off () pdf ( \"pcadapt_starlings_qqplot.pdf\" ) plot ( starlings_pcadapt_pca , option = \"qqplot\" ) dev.off () Plotting and correcting the pvalues code starling_pcadapt_pvalues <- as.data.frame ( starlings_pcadapt_pca $ pvalues ) library ( \"ggplot2\" ) pdf ( \"pcadapt_starlings_pvalues.pdf\" ) hist ( starlings_pcadapt_pca $ pvalues , xlab = \"p-values\" , main = NULL , breaks = 50 , col = \"orange\" ) dev.off () code starlings_pcadapt_padj <- p.adjust ( starlings_pcadapt_pca $ pvalues , method = \"bonferroni\" ) alpha <- 0.1 outliers <- which ( starlings_pcadapt_padj < alpha ) length ( outliers ) write.table ( outliers , file = \"starlings_pcadapt_outliers.txt\" ) length ( outliers ) Output [1] 3 After this, we will be jumping out of R and back into the command line by using the command: code q ()","title":"PCAdapt"},{"location":"day_1/2.pcadapt/#mapping-outliers-pcadapt","text":"Finding the SNP ID of the outlier variants code cd $DIR /analysis The first thing we will do is create list of SNPs in VCF, assign line numbers that can be used to find matching line numbers in outliers (SNP ID is lost in PCadapt & Bayescan, line numbers used as signifiers). We create this in the analysis folder because we will use it for more than just mapping the outlier SNPs for PCAdapt. code grep -v \"^#\" $DIR /data/starling_3populations.recode.vcf | cut -f1-3 | awk '{print $0\"\\t\"NR}' > starling_3populations_SNPs.txt Now let's jump back into the pcadapt directory to continue working with our outliers. We grab column 2 of the outlier file using the AWK command, which contain the number of the outliers code cd $DIR /analysis/pcadapt awk '{print $2}' starlings_pcadapt_outliers.txt > starlings_pcadapt_outliers_numbers.txt We now make a list of outlier SNPS ID's code awk 'FNR==NR{a[$1];next} (($4) in a)' starlings_pcadapt_outliers_numbers.txt ../starling_3populations_SNPs.txt | cut -f3 > pcadapt_outlierSNPIDs.txt head pcadapt_outlierSNPIDs.txt Output 230955:72:- 238881:46:+ 286527:46:-","title":"Mapping Outliers: PCAdapt"},{"location":"day_1/3.vcftools/","text":"VCFtools Windowed Fst \u00b6 The VCFTools manual is available here . Citation Danecek P, Auton A, Abecasis G, Albers CA, Banks E, DePristo MA, Handsaker RE, Lunter G, Marth GT, Sherry ST et al. 2011 The variant call format and VCFtools. Bioinformatics 27 2156\u20132158. (doi:10.1093/bioinformatics/btr330) Fst outliers will allow us to identify SNPs that behave abnormally in pairwise comparisons between populations. The first things we need to do is use our metadata file (currently defined by the environmental variable METADATA ) to make three individual files containing just the list of individuals in each of the populations. We can do this by subseting our sample metadata file, using the command grep to grab lines that match each population's name, and then using awk to keep only the first column of metadata, i.e. the sample names. code module load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1 cd $DIR /data grep \"Lemon\" $METADATA | awk '{print $1}' > individuals_Lemon.txt grep \"War\" $METADATA | awk '{print $1}' > individuals_War.txt grep \"Nowra\" $METADATA | awk '{print $1}' > individuals_Nowra.txt Now we can pick two populations to compare. Let's work with Lemon (short for Lemon Tree, QLD, AU) and War (short for Warnambool, VIC, AU), and so a SNP-based Fst comparison. code cd $DIR /analysis/vcftools_fst vcftools --vcf $VCF --weir-fst-pop $DIR /data/individuals_Lemon.txt --weir-fst-pop $DIR /data/individuals_War.txt --out lemon_war head -n 5 lemon_war.weir.fst Output CHROM POS WEIR_AND_COCKERHAM_FST starling4 107735 0.160891 starling4 137462 -0.0805785 starling4 151332 0.0524489 starling4 227887 0.0569961 The important column is column 5: the Weighted Fst, from Weir and Cockerham\u2019s 1984 publication . This corrects for INFO NEEDED. code wc -l lemon_war.weir.fst Output 5008 Notice how there are as many lines as there are SNPs in the data set, plus one for a header. It is always a good idea to check your output, and make sure everything looks as you expect it to! Next, instead of calculating pairwise population differentiation on a SNP by SNP basis, we will be using a sliding window approach. The --fst-window-size 50000 refers to the window size of the genome (in base pairs) in which we are calculating one value: all SNPs within this window are used to calculate Fst. The --fst-window-step option indicates how many base pairs the window is moving down the genome before calculating Fst for the second window, and then the third, and so on. These sliding windows only work on ordered SNPs on the same chromosome/scaffold/contig. If you data is not set up like this (i.e. all your SNPs are on a single pseudo chromosome) then this method is not appropriate for your data, as it will be making an assumption about where the SNPs are located with respect to one another. code vcftools --vcf $VCF --fst-window-size 50000 --fst-window-step 10000 --weir-fst-pop $DIR /data/individuals_Lemon.txt --weir-fst-pop $DIR /data/individuals_War.txt --out lemon_war head lemon_war.windowed.weir.fst Output CHROM BIN_START BIN_END N_VARIANTS WEIGHTED_FST MEAN_FST starling4 60001 110000 1 0.160891 0.160891 starling4 70001 120000 1 0.160891 0.160891 starling4 80001 130000 1 0.160891 0.160891 starling4 90001 140000 2 -0.00374291 0.0401563 Notice the output is different. code wc -l lemon_war.windowed.weir.fst Output 10838 Notice the line count is different from the SNP-based Fst comparison; there are more lines in the sliding window based Fst comparison. This is because there are more sliding windows across the chromosome in this data set than there are SNPs. Consider which of these steps is better for your data: in low density SNP datasets, the sliding window approach might not be the best to use. Now let's plot the Fst across the chromosome. To do this we will add line numbers on our Fst file that will be used to order the Fst measurements across the x-axis of our manhattan plot. Note X-axis values in the following plot are done y using each outlier window's line number, as they are in order along the genome. Outlier windows are equally spaced, and so line numbers are sufficient to capture the patterns along the genome. Consider that if you are plotting Fst values for SNPs (rather than windows), they may not be equally spaced along the genome and so SNP position may need to be used to make your manhattan plots. code awk '{print $0\"\\t\"NR}' ./lemon_war.windowed.weir.fst > lemon_war.windowed.weir.fst.edit module load R/4.1.0-gimkl-2020a R code library ( \"ggplot2\" ) setwd ( \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/analysis/vcftools_fst\" ) windowed_fst <- read.table ( \"lemon_war.windowed.weir.fst.edit\" , sep = \"\\t\" , header = TRUE ) str ( windowed_fst ) quantile ( windowed_fst $ WEIGHTED_FST , probs = c ( . 95 , . 99 , . 999 )) Output 95% 99% 99.9% 0.1948850 0.3501600 0.5741306 Choose the quantile threshold above which SNPs will be classified as outliers. Below, we chose 99% (i.e. the top 1% of SNP windows). code pdf ( \"fst_starlings_windowed.pdf\" , width = 10 , height = 5 ) ggplot ( windowed_fst , aes ( x = X1 , y = WEIGHTED_FST )) + geom_point () + theme_classic () + geom_hline ( yintercept = 0.35 , linetype = \"dashed\" , color = \"red\" ) dev.off () q () Finally, we will generate a list of outlier SNP IDs. We do this by grabbing all of the SNPs located in the outlier windows. code cd $DIR /analysis/vcftools_fst cat lemon_war.windowed.weir.fst.edit | awk '$5>0.3501600' > lemon_war.windowed.outliers wc -l lemon_war.windowed.outliers Output 107 lemon_war_fst.windowed.outliers code cut -f1-3 lemon_war.windowed.outliers > lemon_war.windowed.outliers.bed vcftools --vcf $VCF --bed lemon_war.windowed.outliers.bed --out fst_outliers --recode grep -v \"#\" fst_outliers.recode.vcf | awk '{print $3}' > vcftoolsfst_outlierSNPIDs.txt wc -l vcftoolsfst_outlierSNPIDs.txt Output 61 We have a total of 61 outlier SNPs locate across 107 outlier SNP windows.","title":"VCFtools Windowed Fst"},{"location":"day_1/3.vcftools/#vcftools-windowed-fst","text":"The VCFTools manual is available here . Citation Danecek P, Auton A, Abecasis G, Albers CA, Banks E, DePristo MA, Handsaker RE, Lunter G, Marth GT, Sherry ST et al. 2011 The variant call format and VCFtools. Bioinformatics 27 2156\u20132158. (doi:10.1093/bioinformatics/btr330) Fst outliers will allow us to identify SNPs that behave abnormally in pairwise comparisons between populations. The first things we need to do is use our metadata file (currently defined by the environmental variable METADATA ) to make three individual files containing just the list of individuals in each of the populations. We can do this by subseting our sample metadata file, using the command grep to grab lines that match each population's name, and then using awk to keep only the first column of metadata, i.e. the sample names. code module load VCFtools/0.1.15-GCC-9.2.0-Perl-5.30.1 cd $DIR /data grep \"Lemon\" $METADATA | awk '{print $1}' > individuals_Lemon.txt grep \"War\" $METADATA | awk '{print $1}' > individuals_War.txt grep \"Nowra\" $METADATA | awk '{print $1}' > individuals_Nowra.txt Now we can pick two populations to compare. Let's work with Lemon (short for Lemon Tree, QLD, AU) and War (short for Warnambool, VIC, AU), and so a SNP-based Fst comparison. code cd $DIR /analysis/vcftools_fst vcftools --vcf $VCF --weir-fst-pop $DIR /data/individuals_Lemon.txt --weir-fst-pop $DIR /data/individuals_War.txt --out lemon_war head -n 5 lemon_war.weir.fst Output CHROM POS WEIR_AND_COCKERHAM_FST starling4 107735 0.160891 starling4 137462 -0.0805785 starling4 151332 0.0524489 starling4 227887 0.0569961 The important column is column 5: the Weighted Fst, from Weir and Cockerham\u2019s 1984 publication . This corrects for INFO NEEDED. code wc -l lemon_war.weir.fst Output 5008 Notice how there are as many lines as there are SNPs in the data set, plus one for a header. It is always a good idea to check your output, and make sure everything looks as you expect it to! Next, instead of calculating pairwise population differentiation on a SNP by SNP basis, we will be using a sliding window approach. The --fst-window-size 50000 refers to the window size of the genome (in base pairs) in which we are calculating one value: all SNPs within this window are used to calculate Fst. The --fst-window-step option indicates how many base pairs the window is moving down the genome before calculating Fst for the second window, and then the third, and so on. These sliding windows only work on ordered SNPs on the same chromosome/scaffold/contig. If you data is not set up like this (i.e. all your SNPs are on a single pseudo chromosome) then this method is not appropriate for your data, as it will be making an assumption about where the SNPs are located with respect to one another. code vcftools --vcf $VCF --fst-window-size 50000 --fst-window-step 10000 --weir-fst-pop $DIR /data/individuals_Lemon.txt --weir-fst-pop $DIR /data/individuals_War.txt --out lemon_war head lemon_war.windowed.weir.fst Output CHROM BIN_START BIN_END N_VARIANTS WEIGHTED_FST MEAN_FST starling4 60001 110000 1 0.160891 0.160891 starling4 70001 120000 1 0.160891 0.160891 starling4 80001 130000 1 0.160891 0.160891 starling4 90001 140000 2 -0.00374291 0.0401563 Notice the output is different. code wc -l lemon_war.windowed.weir.fst Output 10838 Notice the line count is different from the SNP-based Fst comparison; there are more lines in the sliding window based Fst comparison. This is because there are more sliding windows across the chromosome in this data set than there are SNPs. Consider which of these steps is better for your data: in low density SNP datasets, the sliding window approach might not be the best to use. Now let's plot the Fst across the chromosome. To do this we will add line numbers on our Fst file that will be used to order the Fst measurements across the x-axis of our manhattan plot. Note X-axis values in the following plot are done y using each outlier window's line number, as they are in order along the genome. Outlier windows are equally spaced, and so line numbers are sufficient to capture the patterns along the genome. Consider that if you are plotting Fst values for SNPs (rather than windows), they may not be equally spaced along the genome and so SNP position may need to be used to make your manhattan plots. code awk '{print $0\"\\t\"NR}' ./lemon_war.windowed.weir.fst > lemon_war.windowed.weir.fst.edit module load R/4.1.0-gimkl-2020a R code library ( \"ggplot2\" ) setwd ( \"/nesi/nobackup/uoa02613/kstuart_projects/outlier_analysis/analysis/vcftools_fst\" ) windowed_fst <- read.table ( \"lemon_war.windowed.weir.fst.edit\" , sep = \"\\t\" , header = TRUE ) str ( windowed_fst ) quantile ( windowed_fst $ WEIGHTED_FST , probs = c ( . 95 , . 99 , . 999 )) Output 95% 99% 99.9% 0.1948850 0.3501600 0.5741306 Choose the quantile threshold above which SNPs will be classified as outliers. Below, we chose 99% (i.e. the top 1% of SNP windows). code pdf ( \"fst_starlings_windowed.pdf\" , width = 10 , height = 5 ) ggplot ( windowed_fst , aes ( x = X1 , y = WEIGHTED_FST )) + geom_point () + theme_classic () + geom_hline ( yintercept = 0.35 , linetype = \"dashed\" , color = \"red\" ) dev.off () q () Finally, we will generate a list of outlier SNP IDs. We do this by grabbing all of the SNPs located in the outlier windows. code cd $DIR /analysis/vcftools_fst cat lemon_war.windowed.weir.fst.edit | awk '$5>0.3501600' > lemon_war.windowed.outliers wc -l lemon_war.windowed.outliers Output 107 lemon_war_fst.windowed.outliers code cut -f1-3 lemon_war.windowed.outliers > lemon_war.windowed.outliers.bed vcftools --vcf $VCF --bed lemon_war.windowed.outliers.bed --out fst_outliers --recode grep -v \"#\" fst_outliers.recode.vcf | awk '{print $3}' > vcftoolsfst_outlierSNPIDs.txt wc -l vcftoolsfst_outlierSNPIDs.txt Output 61 We have a total of 61 outlier SNPs locate across 107 outlier SNP windows.","title":"VCFtools Windowed Fst"},{"location":"day_2/4.bayescan/","text":"","title":"4.bayescan"},{"location":"day_2/5.baypass/","text":"","title":"5.baypass"},{"location":"day_2/6.conclude/","text":"","title":"6.conclude"}]}